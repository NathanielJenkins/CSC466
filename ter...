[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 3306a26..ccddaaf 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -1,2 +1,11 @@[m
 *.csv[m
[31m-*.BIN[m
\ No newline at end of file[m
[32m+[m[32m*.BIN[m
[32m+[m[32m*.html[m
[32m+[m[32m*.~lock.*[m
[32m+[m[32m*.eps[m
[32m+[m[32m*.jpeg[m
[32m+[m[32m*.jpg[m
[32m+[m[32m*.pdf[m
[32m+[m[32m*.png[m
[32m+[m[32m*.svg[m
[32m+[m[32m*.webp[m
\ No newline at end of file[m
[1mdiff --git a/requirements.txt b/requirements.txt[m
[1mindex 9c01469..7ac8a6a 100644[m
[1m--- a/requirements.txt[m
[1m+++ b/requirements.txt[m
[36m@@ -1,29 +1,48 @@[m
[31m-astroid==2.3.3[m
[32m+[m[32masn1crypto==1.3.0[m
[32m+[m[32mattrs==19.3.0[m
[32m+[m[32mbokeh==2.0.0[m
 certifi==2019.11.28[m
[32m+[m[32mcffi==1.14.0[m
 chardet==3.0.4[m
[32m+[m[32mclick==7.1.1[m
[32m+[m[32mclick-plugins==1.1.1[m
[32m+[m[32mcligj==0.5.0[m
[32m+[m[32mcryptography==2.8[m
 cycler==0.10.0[m
[32m+[m[32mFiona==1.8.13.post1[m
[32m+[m[32mgeopandas==0.7.0[m
[32m+[m[32mgmplot==1.2.0[m
 idna==2.9[m
[31m-IP2Location==8.4.1 [m
[31m-isort==4.3.21[m
[32m+[m[32mIP2Location==8.4.1[m
[32m+[m[32mJinja2==2.11.1[m
 kiwisolver==1.1.0[m
[31m-lazy-object-proxy==1.4.3[m
[32m+[m[32mMarkupSafe==1.1.1[m
 matplotlib==3.2.0[m
[31m-mccabe==0.6.1[m
[31m-numpy==1.18.1[m
[32m+[m[32mmkl-fft==1.0.15[m
[32m+[m[32mmkl-random==1.1.0[m
[32m+[m[32mmkl-service==2.3.0[m
[32m+[m[32mmunch==2.5.0[m
[32m+[m[32mnumpy==1.18.2[m
[32m+[m[32mpackaging==20.3[m
 pandas==1.0.2[m
[31m-pycurl==7.43.0.5[m
[31m-pylint==2.4.4[m
[32m+[m[32mPillow==7.0.0[m
[32m+[m[32mplotly==4.5.4[m
[32m+[m[32mpsutil==5.7.0[m
[32m+[m[32mpycparser==2.20[m
[32m+[m[32mpyOpenSSL==19.1.0[m
 pyparsing==2.4.6[m
[32m+[m[32mpyproj==2.6.0[m
[32m+[m[32mPySAL==1.14.4.post1[m
 PySocks==1.7.1[m
[31m-pyspeedtest==1.2.7[m
 python-dateutil==2.8.1[m
 pytz==2019.3[m
[32m+[m[32mPyYAML==5.3[m
 requests==2.23.0[m
[32m+[m[32mretrying==1.3.3[m
 scipy==1.4.1[m
 seaborn==0.10.0[m
[32m+[m[32mShapely==1.7.0[m
 six==1.14.0[m
[31m-stem==1.8.0[m
[31m-typed-ast==1.4.1[m
[32m+[m[32mtornado==6.0.4[m
[32m+[m[32mtyping-extensions==3.7.4.1[m
 urllib3==1.25.8[m
[31m-wrapt==1.11.2[m
[31m-[m
[1mdiff --git a/tor_visualization.py b/tor_visualization.py[m
[1mnew file mode 100644[m
[1mindex 0000000..b600021[m
[1m--- /dev/null[m
[1m+++ b/tor_visualization.py[m
[36m@@ -0,0 +1,306 @@[m
[32m+[m[32mimport sys[m
[32m+[m[32mimport time[m
[32m+[m[32mimport os[m
[32m+[m[32mimport socket[m
[32m+[m[32mimport IP2Location[m
[32m+[m[32mfrom zipfile import ZipFile[m
[32m+[m[32mimport tarfile[m
[32m+[m
[32m+[m[32mimport requests[m
[32m+[m[32mimport matplotlib.pyplot as plt[m
[32m+[m[32mimport seaborn as sns[m
[32m+[m[32mimport pandas as pd[m
[32m+[m
[32m+[m[32mimport plotly.graph_objects as go[m
[32m+[m[32mimport plotly.io[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_tor_session():[m
[32m+[m[32m    session = requests.session()[m
[32m+[m[32m    tor_port = 9150[m
[32m+[m[32m    # Tor uses the 9050 port as the default socks port[m
[32m+[m[32m    session.proxies = {'http':  'socks5://127.0.0.1:{}'.format(tor_port),[m
[32m+[m					[32m   'https': 'socks5://127.0.0.1:{}'.format(tor_port)}[m
[32m+[m[32m    return session[m
[32m+[m
[32m+[m[32mdef get_regular_session():[m
[32m+[m[32m    session = requests.session()[m
[32m+[m[32m    return session[m
[32m+[m
[32m+[m[32mdef init(df, number_of_records):[m[41m [m
[32m+[m[32m    tor_session = get_tor_session()[m
[32m+[m[32m    reg_session = get_regular_session()[m
[32m+[m[41m	[m
[32m+[m[32m    df = make_requests(tor_session, reg_session, df, number_of_records)[m
[32m+[m[32m    print("results")[m
[32m+[m[32m    print(df)[m
[32m+[m[32m    return df[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef append_data(data, url, tor_req_time, elapsed_time, type, ip, rec):[m
[32m+[m
[32m+[m[32m    data['url'].append(url)[m
[32m+[m[32m    data['time'].append(tor_req_time)[m
[32m+[m[32m    data['elapsed_time'].append(elapsed_time)[m
[32m+[m[32m    data['type'].append('regular')[m
[32m+[m[32m    data['ip'].append(ip)[m
[32m+[m[32m    data['geo'].append(rec)[m
[32m+[m[32m    if rec is None:[m
[32m+[m[32m        data['country'].append(None)[m
[32m+[m[32m        data['country_code'].append(None)[m
[32m+[m[32m        data['region'].append(None)[m
[32m+[m[32m        data['city'].append(None)[m
[32m+[m[32m        data['latitude'].append(None)[m
[32m+[m[32m        data['longitude'].append(None)[m
[32m+[m[32m        data['zipcode'].append(None)[m
[32m+[m[32m        data['timezone'].append(None)[m
[32m+[m[32m    else:[m
[32m+[m[32m        print("rec.country_long:", rec.country_long)[m
[32m+[m[32m        print("rec.country_short:", rec.country_short)[m
[32m+[m[32m        print("rec.region:", rec.region)[m
[32m+[m[32m        print("rec.city:", rec.city)[m
[32m+[m[32m        print("rec.latitude:", rec.latitude)[m
[32m+[m[32m        print("rec.longitude:", rec.longitude)[m
[32m+[m[32m        print("rec.zipcode:", rec.zipcode)[m
[32m+[m[32m        print("rec.timezone:", rec.timezone)[m
[32m+[m[32m        data['country'].append(rec.country_long)[m
[32m+[m[32m        data['country_code'].append(rec.country_short)[m
[32m+[m[32m        data['region'].append(rec.region)[m
[32m+[m[32m        data['city'].append(rec.city)[m
[32m+[m[32m        data['latitude'].append(rec.latitude)[m
[32m+[m[32m        data['longitude'].append(rec.longitude)[m
[32m+[m[32m        data['zipcode'].append(rec.zipcode)[m
[32m+[m[32m        data['timezone'].append(rec.timezone)[m
[32m+[m[32m    return data[m
[32m+[m
[32m+[m
[32m+[m[32mdef make_requests(tor_session, reg_session, df, num_of_records) :[m
[32m+[m[32m    database = IP2Location.IP2Location("IP2LOCATION-LITE-DB11.BIN")[m
[32m+[m
[32m+[m[32m    data = {'ip': [], 'url' : [] , "time" : [], "elapsed_time" : [], "type": [], "geo": [],[m[41m [m
[32m+[m[32m    "country": [], "country_code": [], "region": [], "city": [], "latitude": [], "longitude": [],[m
[32m+[m[32m    "zipcode": [], "timezone": [] }[m
[32m+[m[32m    count = 0[m
[32m+[m[32m    df = df.sample(frac=1)[m
[32m+[m[32m    for url in df["Domain"][0:num_of_records]:[m[41m [m
[32m+[m[32m        count+=1[m
[32m+[m[32m        print("\ncount:", count)[m
[32m+[m[32m        full_url="http://"+url[m
[32m+[m[32m        print("url:", url)[m
[32m+[m[32m        try:[m
[32m+[m[32m            ip = (socket.gethostbyname(url))[m
[32m+[m[32m            rec = database.get_all(ip)[m
[32m+[m[32m        except:[m
[32m+[m[32m            ip = None[m
[32m+[m[32m            rec = None[m
[32m+[m
[32m+[m[32m        # regular[m
[32m+[m[32m        try:[m
[32m+[m[32m            start = time.time()[m
[32m+[m[32m            reg_req = reg_session.get(full_url)[m
[32m+[m[32m            end = time.time()[m
[32m+[m[32m            tor_req_time = reg_req.elapsed.total_seconds()[m
[32m+[m[32m            elapsed_time = end-start[m
[32m+[m[32m            data = append_data(data, url, tor_req_time, elapsed_time, 'regular', ip, rec)[m
[32m+[m[32m            print("reg_req.elapsed.total_seconds():", tor_req_time)[m
[32m+[m[32m            print("regular_elapsed_time:", elapsed_time)[m
[32m+[m[32m        except:[m
[32m+[m[32m            data = append_data(data, url, None, None, 'regular', ip, rec)[m
[32m+[m
[32m+[m[32m        # tor[m
[32m+[m[32m        try:[m[41m [m
[32m+[m[32m            start = time.time()[m
[32m+[m[32m            tor_req = tor_session.get(full_url)[m
[32m+[m[32m            end = time.time()[m
[32m+[m[32m            tor_req_time = tor_req.elapsed.total_seconds()[m
[32m+[m[32m            elapsed_time = end-start[m
[32m+[m[32m            data = append_data(data, url, tor_req_time, elapsed_time, 'tor', ip, rec)[m
[32m+[m[32m            print("tor_req.elapsed.total_seconds():", tor_req_time)[m
[32m+[m[32m            print("tor_elapsed_time:", elapsed_time)[m
[32m+[m[32m        except:[m[41m [m
[32m+[m[32m            data = append_data(data, url, None, None, 'tor', ip, rec)[m
[32m+[m[41m           [m
[32m+[m[32m    return pd.DataFrame(data)[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_data():[m
[32m+[m[32m    filename = "top10milliondomains"[m
[32m+[m[32m    extract(filename, 'csv')[m
[32m+[m[32m    csv_filename = filename+".csv"[m
[32m+[m[32m    db_filename = "IP2LOCATION-LITE-DB11"[m
[32m+[m[32m    extract(db_filename, "BIN")[m
[32m+[m[32m    bin_db_filename = db_filename+".BIN"[m
[32m+[m[32m    df = read_data(csv_filename)[m
[32m+[m[32m    print("df:", df)[m
[32m+[m[32m    print("list(df.columns.values):", list(df.columns.values))[m
[32m+[m[32m    print(df["Domain"])[m
[32m+[m[32m    return df[m
[32m+[m
[32m+[m[32mdef extract(filename, data_type):[m
[32m+[m[32m    extract_filename = filename+"."+data_type[m
[32m+[m[32m    tar_filename = filename+".tar"[m
[32m+[m[32m    zip_filename = filename+".zip"[m
[32m+[m
[32m+[m[32m    if not os.path.exists(extract_filename):[m
[32m+[m[32m        '''[m
[32m+[m[32m        tf = tarfile.open(tar_filename)[m
[32m+[m[32m        tf.extractall()[m
[32m+[m[32m        '''[m
[32m+[m[32m        with ZipFile(zip_filename) as zipObj:[m
[32m+[m[32m            # Extract all the contents of zip file in current directory[m
[32m+[m[32m            zipObj.extractall()[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef map_viz(df):[m
[32m+[m[32m    index_cols = ['country_code', 'elapsed_time', 'country'][m
[32m+[m[32m    map_df = df[index_cols][m
[32m+[m[32m    map_df = map_df[map_df.notna()][m
[32m+[m[32m    map_df = map_df.dropna()[m
[32m+[m[32m    map_df['country_code'] = map_df['country'].str[:3].str.upper()[m
[32m+[m[32m    mean = df["elapsed_time"].mean()[m
[32m+[m[32m    std =  df["elapsed_time"].std()[m
[32m+[m
[32m+[m
[32m+[m[32m    map_df = map_df[map_df['elapsed_time'] < map_df['elapsed_time'].quantile(.80)][m
[32m+[m[32m    print("map_df")[m
[32m+[m[32m    print(map_df)[m
[32m+[m[32m    print("map_df['elapsed_time']")[m
[32m+[m[32m    print(map_df['elapsed_time'])[m
[32m+[m
[32m+[m[32m    map_df.to_csv('map_df.csv')[m
[32m+[m[32m    fig = go.Figure(data=go.Choropleth([m
[32m+[m[32m        locations = map_df['country_code'],[m
[32m+[m[32m        z = map_df['elapsed_time'],[m
[32m+[m[32m        text = map_df['country'],[m
[32m+[m[32m        colorscale = 'Blues',[m
[32m+[m[32m        autocolorscale=False,[m
[32m+[m[32m        reversescale=False,[m
[32m+[m[32m        marker_line_color='darkgray',[m
[32m+[m[32m        marker_line_width=0.5,[m
[32m+[m[32m        colorbar_tickprefix = '',[m
[32m+[m[32m        colorbar_title = 'Network Speed<br>Elapsed Time',[m
[32m+[m[32m    ))[m
[32m+[m
[32m+[m[32m    fig.update_layout([m
[32m+[m[32m        title_text='Network Speed',[m
[32m+[m[32m        geo=dict([m
[32m+[m[32m            showframe=False,[m
[32m+[m[32m            showcoastlines=False,[m
[32m+[m[32m            projection_type='equirectangular'[m
[32m+[m[32m        ),[m
[32m+[m[32m        annotations = [dict([m
[32m+[m[32m            x=0.55,[m
[32m+[m[32m            y=0.1,[m
[32m+[m[32m            xref='paper',[m
[32m+[m[32m            yref='paper',[m
[32m+[m[32m            text='Tor: <a href="https://www.torproject.org/">\[m
[32m+[m[32m                The Tor Project</a>',[m
[32m+[m[32m            showarrow = False[m
[32m+[m[32m        )][m
[32m+[m[32m    )[m
[32m+[m
[32m+[m[32m    return fig[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mdef read_data(filename):[m
[32m+[m[32m    website_df = pd.read_csv(filename)[m
[32m+[m[32m    return website_df[m
[32m+[m
[32m+[m
[32m+[m[32mdef handle_args():[m
[32m+[m[32m    usage_err_msg = """\n ARGUMENTS ERROR \n\n[m[41m [m
[32m+[m[32m    usage:  \n[m[41m [m
[32m+[m[32m    'tor_visualization.py --resume true' will load data from previous run and visualize the data on the world map \n \n[m[41m  [m
[32m+[m[32m    'tor_visualization.py --test_size 100' will run the tor network speed tests on 100 different webservers \n \n[m[41m [m
[32m+[m[32m    'tor_visualization.py --save true' will save the graph to a file \n \n[m[41m [m
[32m+[m[32m    'tor_visualization.py --outfile mygraph.png' will save the graph to a file called  mygraph.png  \n \n[m[41m [m
[32m+[m[32m    'tor_visualization.py --display false will prevent the visualization from being hosted on localhost \n \n[m[41m [m
[32m+[m[32m    """[m[41m [m
[32m+[m[32m    arguments = len(sys.argv) - 1[m
[32m+[m[32m    print("arguments:", arguments)[m
[32m+[m[32m    arg_dict = {}[m
[32m+[m[32m    if( arguments % 2 != 0):[m
[32m+[m[32m        print(usage_err_msg)[m
[32m+[m[32m        exit(0)[m
[32m+[m[41m    [m
[32m+[m[32m    # output argument-wise[m
[32m+[m[32m    key_index = 1[m
[32m+[m[32m    while (arguments >= key_index):[m
[32m+[m[32m        print("parameter %i: %s" % (key_index, sys.argv[key_index]))[m
[32m+[m[32m        value_index = key_index + 1[m
[32m+[m[32m        print("parameter %i: %s" % (value_index, sys.argv[value_index]))[m
[32m+[m[32m        arg_dict[sys.argv[key_index]] = sys.argv[value_index][m
[32m+[m[32m        key_index = key_index + 2[m
[32m+[m
[32m+[m[32m    return arg_dict[m
[32m+[m
[32m+[m
[32m+[m[32m'''[m
[32m+[m[32musage:[m[41m   [m
[32m+[m[32m    'tor_visualization.py --resume true' will load data from previous run and visualize the data on the world map[m[41m [m
[32m+[m[32m    'tor_visualization.py --test_size 100' will run the tor network speed tests on 100 different webservers[m[41m [m
[32m+[m[32m    'tor_visualization.py --save true' will save the graph to a file[m[41m [m
[32m+[m[32m    'tor_visualization.py --outfile mygraph.png' will save the graph to a file called  mygraph.png[m[41m [m
[32m+[m[32m    'tor_visualization.py --display false will prevent the visualization from being hosted on localhost[m[41m [m
[32m+[m[32m'''[m
[32m+[m
[32m+[m[32mif __name__ == '__main__':[m
[32m+[m[32m    output_filename = 'map_data.csv'[m
[32m+[m[32m    arg_dict = handle_args()[m
[32m+[m[32m    print("arg_dict")[m
[32m+[m[32m    print(arg_dict)[m
[32m+[m[32m    resume = False[m
[32m+[m[32m    test_size = False[m
[32m+[m[32m    size = 50[m
[32m+[m[32m    if '--resume' in arg_dict:[m
[32m+[m[32m        if(arg_dict['--resume'] == 'true'):[m
[32m+[m[32m            resume = True[m
[32m+[m[32m            df = pd.read_csv(output_filename)[m[41m [m
[32m+[m[32m    if '--test_size' in arg_dict:[m
[32m+[m[32m        if(arg_dict['--test_size'].isdigit()):[m
[32m+[m[32m            test_size = True[m
[32m+[m[32m            size = int(arg_dict['--test_size'])[m
[32m+[m
[32m+[m[32m    if resume == False:[m
[32m+[m[32m        df = get_data()[m
[32m+[m[32m        df = init(df, size)[m
[32m+[m[32m        print("final data")[m
[32m+[m[32m        print(df)[m
[32m+[m[32m        print(df.columns)[m
[32m+[m[32m        df.to_csv(output_filename)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    fig = map_viz(df)[m
[32m+[m[32m    display = True[m
[32m+[m[32m    save = False[m
[32m+[m[32m    outfile = "tor_map.png"[m
[32m+[m[32m    if '--display' in arg_dict:[m
[32m+[m[32m        if(arg_dict['--display'] == 'false'):[m
[32m+[m[32m            display = False[m
[32m+[m
[32m+[m[32m    if '--save' in arg_dict:[m
[32m+[m[32m        if(arg_dict['--save'] == 'true'):[m
[32m+[m[32m            save = True[m
[32m+[m
[32m+[m[32m    if '--outfile' in arg_dict:[m
[32m+[m[32m        outfile = arg_dict['--outfile'][m
[32m+[m[32m        save = True[m
[32m+[m
[32m+[m[32m    if display==True:[m
[32m+[m[32m        fig.show()[m
[32m+[m
[32m+[m[32m    print("outfile:", outfile)[m
[32m+[m[32m    if save==True:[m
[32m+[m[32m        fig.write_image(outfile)[m
[32m+[m
[32m+[m[41m    [m
[32m+[m
